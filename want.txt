заказать платы:
5 MUX4:1 v3
5 переходник 273
10 RegLED
10 MUL

хочется:
Flags
JMPS
RAM
ROM
Addr Counter
Osc

MUL, ALU - похожи на stripboard


Сделано прям сейчас в железе:

 0 1 2 3 4 5 6 7 8 9 A B C D E F
      4 + 2 + 2 + 8
|  COP  |DST|SRC|  MAYBE CONST  | N
---------------------------------
|  ADD  |DST|SRC|       -       | 0  // вообще-то здесь есть 8 свободных бит, которые можно спокойно потратить для модификации команды
| ADDC  |DST|SRC|       -       | 1  // и сделать из неё INC, DEC, ...
|  AND  |DST|SRC|       -       | 2
|   OR  |DST|SRC|       -       | 3
|  XOR  |DST|SRC|       -       | 4
|  MOV  |DST|SRC|       -       | 5
|  UNO  |DST|TYP|       -       | 6  // INV SWAP LSR LSRC
|  MUL  |DST|SRC|       -       | 7
|  LDI  |DST| - |     CONST     | 8  // SRC здесь не используются, но можно переключать константу между: 1, 2, CONST, 0xFF
|   LD  |DST|EXT|     CONST     | 9  // EXT может переключать входы сумматора RAM по принципу: ADDR = R3:R2*EXT[0] + CONST; EXT[1] переключает на пару R1:R0
|   IN  |DST|PRT|       -       | A  // PRT - номер порта, откуда будем вводить данные
|  OUT  |PRT|SRC|       -       | B  // PRT - номер порта, куда будем выводить данные
|   ST  |SRC|EXT|     CONST     | C  // SRC стоит на месте DST, т.к. для команды есть отдельный мультиплексор, подключенный к шине OUT
| CTRL  | FLAGS |       -       | D  // CLRF STOP [INC SP ; DEC SP]
|  CMP  |DST|SRC|       -       | E
| BRANC |  TYPE |  8 BIT ADDR   | F  // CALL, JMP, RET, JZ, JL, JNE, JG, -, JE, JC, JNZ, JNC
                                     // переход сейчас только относительный и только в пределах +-127 команд
                                     // но есть несколько свободных команд, можно сделать FARJMP, а лучше JMP по абсолютному адресу
план:
доделать подключение RAM, сделать переключение между парами регистров и зануление регистров в мультиплексорах
сделать плату портов
реализовать команды IN + OUT
поменять ROM на 16 бит, ибо задолбало
нарисовать/протравить плату ROM
врезать в АЛУ инвертор и шинник перед бинарными командами,
 (последний нужен для того, чтобы при подключении константы не случилось КЗ)
+добавить на АЛУ разъёмов, чтобы два раза не разбирать
+сделать новую плату==стрипбоард MUL, закрепить под АЛУ!
реализовать команду INC
поменять MUX4:1 на новые, с шинными формирователями
переделать счётчик адреса, использовать старые MUX4:1
(хотя лучше нарисовать новые, узкие)
реализовать команду FARCALL (пусть будет AFCALL - absolute far call)
стек для CALL!!


Можно добиться минимальной кровью
(так как ADDI, ANDI до сих пор нет, лишние регистры не помешают):
                      4   +  3 + 1 + 3  +    5    = 16
                   0 1 2 3 4 5 6 7 8 9 A B C D E F
                  |  COP  | DST |*| SRC | MB CONST| N  // бит * может работать по разному, для разных команд
 cmd structure    ---------------------------------    // bits: d - DST, s - SRC, C - UseCF, I - InvSRC, F - ForceCF, Z - ZeroSRC, v - const
0000ddd0sss---ZI  |   AND | DST |0| SRC |  -  |Z|I| 0  //       p - PORT, P - REGISTER PAIR, o - OFFSET, typ - TYPE, a - ADDR
0000ddd1vvvvvvvv  |  ANDI | DST |1|  8 BIT CONST  | 0  // константа вместо регистра (нужен дополнительный шинный формирователь на шину SRC, но он конфликтует с битом I)
0001ddd0sss---ZI  |    OR | DST |0| SRC |  -  |Z|I| 1  // не понятно, нужны ли биты I+Z для команд AND/OR/XOR
0001ddd1vvvvvvvv  |   ORI | DST |1|  8 BIT CONST  | 1  // константа вместо регистра
0010ddd0sss---ZI  |   XOR | DST |0| SRC |  -  |Z|I| 2
0010ddd1vvvvvvvv  |  XORI | DST |1|  8 BIT CONST  | 2
0011ddd0sss---ZI  |   MOV | DST |0| SRC |  -  |Z|I| 3  // с MOV, кстати, тоже будет работать, поэтому можно сделать R1 := INV(R0), или типа того
0011ddd1vvvvvvvv  |  MOVI | DST |1|  8 BIT CONST  | 3
0100ddd0sss---ZI  |   MUL | DST |0| SRC |  -  |Z|I| 4  // а команда MUL в сочетании с ZeroSRC позволит занулить сразу два регистра
0100ddd1vvvvvvvv  |  MULI | DST |1|  8 BIT CONST  | 4  // константа

0101ddd-typ-----  |   UNO | DST |-| TYP |  -      | 7  // INV SWAP LSR LSRC (кстати, теперь здесь есть ещё 4 свободных слота!)

0110ddd0sss--FZI  |   ADD | DST |C| SRC | - |F|Z|I| 5  // есть 4 бита, для модификации команды UseCF(C), InvSRC(I), ForceCF(F), ZeroSRC(Z)
0111ddd1vvvvvvvv  |  ADDI | DST |C|  8 BIT CONST  | 6  // чтобы сделать из неё INC, INCC, DEC, DECC, SUB, SUBC
1000dddZPooooooo  |    LD | DST |Z|P| 7BIT OFFSET | 8  // Z может переключать входы сумматора RAM по принципу: ADDR = R7:R6*E + CONST, P переключает на пару R5:R4
1001sss-pppppppp  |    IN | DST |-|  7 BIT PORT |I| 9  // PORT - номер порта, откуда будем вводить данные, I - проинвертировать вводимое значение
1010sss-pppppppp  |   OUT | SRC |-|  8 BIT PORT   | A  // смотри ниже... (придётся использовать тот же мультиплексор, что и для памяти)
1011sssZPooooooo  |    ST | SRC |Z|P| 7BIT OFFSET | B  // SRC стоит на месте DST, т.к. для команды ST есть отдельный мультиплексор, подключенный к шине OUT
1100flg---------  |  CTRL |FLAGS|-|          -    | C  // CLRF STOP/DBG SETCF
1101dddCsss-----  |   CMP | DST |C| SRC |    -    | D  // окей, а здесь есть свободные биты для организации CMPC
1110dddCvvvvvvvv  |  CMPI | DST |C|  8 BIT CONST  | E
1111typeaaaaaaaa  | BRANC |  TYPE |  8 BIT ADDR   | F  // CALL, JMP, RET, JZ, JL, JNE, JG, RETI?, JE, JC, JNZ, JNC [AJMP, FJMP]
                   0 1 2 3 4 5 6 7 8 9 A B C D E F     // окей, есть 8 бит.... хорошо, но мало. нужен FARJMP, и опять таки ABSJUMP :((

план:
перенести биты SRC туда же, где биты CONST
заменить мультиплексоры на MUX8:1
протестировать на той системе команд, что есть ;)

перенести подключение константы с шины OUT на шину SRC
нарисовать/протравить новую плату декодера команд
снова всё соединить
переделать RAM, добавить на эту же плату ROM, развернуть разъём OFFSET
прикрутить UART
добавить банк памяти

кстати, при переезде на команду MUL1, в качестве счётчика адреса, можно сделать MUL1 + MUL1 + MUX + мелкая логика = 16 бит адрес + FARJMP
то есть, можно будет воткнуть несколько "сервисных" процедур в верхние адреса, с шагом по 256 байт, и с переходом по абсолютным адресам
(и теперь для счастья не хватает только PUSH/POP, которые нужны для локальных параметров)

можно попробовать сделать так:
     5    +  3  +  3  = 11
 0 1 2 3 4 5 6 7 8 9 A B C D E F
------------------------------------
|M|  ADD  | DST | SRC |F|Z|z|I|i| 00  // всё ещё есть свободное место для INC, INCC, DEC, DECC, SUB, SUBC
|M| ADDC  | DST | SRC |F|Z|z|I|i| 01  // F - установить CF в 1, z/Z - занулить младший/старший нибл SRC, i/I - инвертировать младший/старший нибл SRC
|M|  AND  | DST | SRC |-|Z|z|I|i| 02  // примеры: INC => ADD Rx, x ; F=1 + Z=1 + z=1
|M|   OR  | DST | SRC |-|Z|z|I|i| 03  //          MOV R1, 60h ; ADD R1, R2 ; Z=1 => отковырять младший нибл и сделать из него символ
|M|  XOR  | DST | SRC |-|Z|z|I|i| 04  //          XOR R1, R1 ; z=1 => занулить только старший нибл
|M|  MOV  | DST | SRC |-|Z|z|I|i| 05  //          XOR R1, R1 ; Z=1 + i=1 => проинвертировать младший нибл, занулить старший
|M|  MUL  | DST | SRC |-|Z|z|I|i| 06  //          AND R1, R2 ; i=1 => проинвертировать младший нибл R2 и сделать И с R1
|M|  UNO  | DST | TYP |F|Z|z|I|i| 07  // флаг CF=1 даст для SHR единичку в старшем бите, остальные флаги меняют SRC, который здесь не используется
|   -LDI- | DST |  8 bit CONST  | 08  // 5 + 3 + 8 = 16 - БОЛЬШЕ НЕ НУЖНА, МОЖНО ЗАМЕНИТЬ НА LPM... а шинный формирователь можно выкинуть
|    LPM  | DST | SRC |    -    | 08  // SRC - берём отсюда адрес константы, которую читать
|     LD  | DST | EXT | OFFSET  | 09  // EXT может переключать входы сумматора RAM по принципу: ADDR = PTR*EXT[0] + OFFSET;
|     IN  | DST | PORT|  -  |I|i| 0A  // I/i инвертировать ли порт     // EXT[1-2] переключает PTR на пару R1:R0 / R3:R2 / R5:R4 / R7:R6
|    OUT  | PORT| SRC |  -  |I|i| 0B  // при чтении/записи             //                                    ?   /   Y   /   X   /   SP
|     ST  | SRC | EXT | OFFSET  | 0C                                   // POP  Rx (macro) => INC SPL ; INCC SPH ; LD Rx, SP
|   CTRL  |   FLAGS   |    -    | 0D                                   // PUSH Rx (macro) => ST SP, Rx ; DEC SPL ; DECC SPH - цена PUSHа + ещё один 74HC257 + доработка сумматора под INC
|M|  CMP  | DST | SRC |    -    | 0E
|T| BRNCH | TYPE|   8 bit ADDR  | 0F  // CALL, JMP, RET, JZ, JL, JNE, JG, NOP - переход в +-127 команды, значение прибавляется к текущему счётчику команд
|T| BRNCH | TYPE|   8 bit ADDR  | 1F  //   JE, JC, JNZ, JNC, --, --,  --, AFCALL - Absolute Far Call - 8 bit ADDR кладём в старшие биты и ничего не добавляем
                                      //   0    1    2    3   4   5    6   7  // вообще здесь надо как-то хитро хранить 8ой бит адреса, или 4ый бит TYPE
                                                                              // например, брать один бит TYPE из старшего бита команды
// M нужно использовать, если команда из первой половины списка, или если код команды 0E (нужен лишний инвертор)
// можно переставить местами BRNCH и CMP, тогда будет проще проверять КОП, но придётся переделывать плату декодера команд

так как старший бит команды свободен, можно легко добавить переключение на константу по этому биту:
|   ADDI  | DST |     CONST     | 10  // сложение с константой
|  ADDCI  | DST |     CONST     | 11  // сложение с константой
|   ANDI  | DST |     CONST     | 12  // AND с константой
|    ORI  | DST |     CONST     | 13  // OR с константой
|   XORI  | DST |     CONST     | 14  // XOR с константой
|   MOVI  | DST |     CONST     | 15  // MOV с константой (нужен ли тогда LDI?)
|   MULI  | DST |     CONST     | 16  // MUL с константой (в данном случае прикол в том, что результат всё равно ляжет в ДВА регистра)
                                      // MUL r0, r7 ; r1:r0 := r0*r7 ; нужна ли при этом константа? хз
|   LPMI  | DST |      ADDR     | 18  // LPM с непосредственным адресом
|   CMPI  | DST |     CONST     | 1E  // CMP с константой
 0 1 2 3 4 5 6 7 8 9 A B C D E F

туду:
+сделать так, чтобы умножитель записывал и старшую половину результата
спаять мультиплексоры MUX8:1
поменять мультиплексоры на MUX8:1
перекинуть проводки SRC на другие биты
скоммутировать битики зануления и инверсии
добавить мультиплексор для переключения SRC на константу
добавить мультиплексор 257, т.к. теперь три бита SRC, а не два
убрать шинник подключения константы к OUT

+переделать INV-B и добавить на него шинник?
протравить новый инвертор INV-B с двумя входами
не забыть, что я хотел переставить местами команды BRANCH/CMP и UNO/MUL

подумать, не сделать ли стек в виде просто 74HC161 (или как там называется двоичный реверсивный счётчик)
типа так:
ADDR = PTR + OFFSET;
EXT[2:1] переключает PTR на пару R1:R0 / R3:R2 / R5:R4 / R7:R6
                      банк 0       ?   /   Z   /   Y   /   X
                      банк 1       0   /   ?   /   ?   /   SP
EXT[0] - переключает "банк", с тем, чтобы SP жил сам по себе и не мешал другим регистрам
В принципе, можно не городить отдельный большой MUX8:1, а прям рядом с RAM поставить MUX2:1,
один его вход подключить к шинам SRC/DST, как сейчас, а второй подвести к SP.
Можно даже сделать отдельную плату из 4 регистров SP и 4 мультиплексоров 2:1.

 Z  I  SRC
 ----------
 0  0  SRC
 0  1  !SRC
 1  0  0
 1  1  FF

CALL/RET:
MUX4:1
00 - IP := IP + 1/CONST  // STEP/JMP/CALL
01 - IP := [SP++]        // RET  (здесь другой SP)
10 - IP := CONST << 8    // AFCALL
11 - IP := 0x1000        // IRQ ADDR
LPM опять не влез *ROFL*


или даже вот так:
 0 1 2 3 4 5 6 7 8 9 A B C D E F
      6     + 2 + 2 = 10
|     ADD   |DST|SRC|     -     | 0
|    ADDC   |DST|SRC|     -     | 1
|     AND   |DST|SRC|     -     | 2
|      OR   |DST|SRC|     -     | 3
|     XOR   |DST|SRC|     -     | 4
|     MOV   |DST|SRC|     -     | 5
|     MUL   |DST|SRC|     -     | 6
|     UNO   |DST|TYP|     -     | 7
|     LDI   |DST|       CONST   | 8   // 6 + 2 + 8 = 16
|      LD   |DST|SRC|   CONST   | ?   // УПС! было смещение от 0 до 255, стало до 63 ;)
// недостающие биты можно размазать на несколько команд: LD (оба значения), LDO (только смещение), LDA (только адрес R3:R2)
|      LD   |DST|       CONST   | 9   // R3:R2 + CONST
|     LDA   |DST|         -     | A   // R3:R2
|     LDO   |DST|       CONST   | B   // CONST

|      IN   |DST|SRC|     -     | C
|     OUT   |DST|SRC|     -     | D
|      ST   |DST|SRC|   CONST   | E/F/10

|    CTRL   |  FLAGS|     -     | 11   // теперь не нужна, можно сделать CLRF
|     CMP   |DST|SRC|     -     | 12
|    CMPC   |DST|SRC|     -     | 13

и теперь можно чего-нибудь добавить:
|     SUB   |DST|SRC|     -     | 14
|     SBC   |DST|SRC|     -     | 15
|    ADDI   |DST|      CONST    | 16
|   ADDCI   |DST|      CONST    | 17
|    ANDI   |DST|      CONST    | 18
|     ORI   |DST|      CONST    | 19
|    XORI   |DST|      CONST    | 1A
|    MOVI   |DST|      CONST    | 1B
|    MULI   |DST|      CONST    | 1C
|    SUBI   |DST|      CONST    | 1D
|    SBCI   |DST|      CONST    | 1E
|    CMPI   |DST|      CONST    | 1F
|   CMPCI   |DST|      CONST    | 20

|     INC   |DST|         -     | 21
|    INCC   |DST|         -     | 22
|     DEC   |DST|         -     | 23
|    DECC   |DST|         -     | 24

|     LPM   |DST|      ADDR     | 25
|    LPMA   |DST|         -     | 26  // читаем из R3:R2, например

остались не заняты: 26, 27, 28, 29, 2A

|  BRANCH   | TYPE  |  OFFSET   | ?   // а вот с переходами стало как-то совсем грустно :(

но можно сделать так:
|    JMP    |       OFFSET      | 2B  // 6 + 10
|   CALL    |       OFFSET      | 2C  // 6 + 10
|    RET    |          -        | 2D  // 6 + 10
|     JL    |       OFFSET      | 2E  // 6 + 10
|     JE    |       OFFSET      | 2F  // 6 + 10
|     JG    |       OFFSET      | 30  // 6 + 10
|    JNE    |       OFFSET      | 3A  // 6 + 10
|     JC    |       OFFSET      | 3B  // 6 + 10
|    JNC    |       OFFSET      | 3C  // 6 + 10
|     JZ    |       OFFSET      | 3D  // 6 + 10
|    JNZ    |       OFFSET      | 3E  // 6 + 10
|    NOP    |       OFFSET      | 3F  // 6 + 10

туду: переупорядочить как-то команды, чтобы минимизировать логику

------------------------------------------------------------------
6 бит -> 64 команды -> 0..63 -> 00..3F
         4*16

собираем в кучу:

CMD     CONST
TYPE  REQUIRED - этот же бит входит в состав кода операции, но пишу я его отдельно, просто чтобы видеть значение бита
 ||      ||
 \/      \/
// команды на 0 (нужен дешифратор на 8)
// используют CONST как надо, переключают мультиплексор
 01 2 3 4 5 6 7  8 9 A B C D E F      CT COP Const // младший бит тоже является кодом операции,
|00   ADD 0|DST||SRC|     -     | 00  00 000 0     // но также указывает на необходимость использования константы
|00  ADDI 1|DST||      CONST    | 01  00 000 1
|00  ADDC 0|DST||SRC|     -     | 02  00 001 0
|00 ADDCI 1|DST||      CONST    | 03  00 001 1
|00   SUB 0|DST||SRC|     -     | 04  00 010 0
|00  SUBI 1|DST||      CONST    | 05  00 010 1
|00  SUBC 0|DST||SRC|     -     | 06  00 011 0
|00 SUBCI 1|DST||      CONST    | 07  00 011 1

|00   AND 0|DST||SRC|     -     | 08  00 100 0
|00  ANDI 1|DST||      CONST    | 09  00 100 1
|00    OR 0|DST||SRC|     -     | 0A  00 101 0
|00   ORI 1|DST||      CONST    | 0B  00 101 1
|00   XOR 0|DST||SRC|     -     | 0C  00 110 0
|00  XORI 1|DST||      CONST    | 0D  00 110 1
|00   MOV 0|DST||SRC|     -     | 0E  00 111 0
|00  MOVI 1|DST||      CONST    | 0F  00 111 1

// команды на 1 (нужен дешифратор на 16)
 01 2 3 4 5 6 7  8 9 A B C D E F      CT COP
|01   MUL 0|DST||SRC|     -     | 10  01 000 0  // чудес на свете не бывает, и результат всё равно ляжет в два регистра
                                                // поэтому нет смысла экономить на спичках, и умножать на константу
|01   LPM 1|DST||         -     | 11  01 000 1  // читаем память программ по адресу, лежащему в [R3:R2]
|01   UNO 0|DST||TYP|     -     | 12  01 001 0

// на данный момент эти константы подключены непосредственно к RAM
|01    LD 1|DST||     OFFSET    | 13  01 001 1  // LD Rx, [OFFSET] (load by offset) - чтение глобальных переменных (256 байт)
|01   LDA 0|DST||         -     | 14  01 010 0  // LD Rx, [R3:R2] (load by ptr) - чтение по указателю, а-ля *ptr
|01   LDO 1|DST||     OFFSET    | 15  01 010 1  // LD Rx, [R3:R2 + OFFSET] (load by ptr+offset) - чтение со смещением, а-ля *(ptr+1)

|01    IN 0|DST||SRC|     -     | 16  01 011 0

// для команды ST выделен отдельный мультиплексор, подключенный к шине OUT
// он получает биты S0:S1 из несколько непривычного места, а именно оттуда,
// откуда обычно достаются биты DST
// содержимое мультиплексора SRC, подаваемое на одноимённую шину, лучше бы занулить
|01    ST 1|S01||     OFFSET    | 17  01 011 1  // ST [CONST], Rx
|01   STA 0|S01||         -     | 18  01 100 0  // ST [R3:R2], Rx
|01   STO 1|S01||     OFFSET    | 19  01 100 1  // ST [R3:R2 + CONST], Rx

|01  CTRL 0|TYP||         -     | 1A  01 101 0  // всё та же старая команда CTRL, за которой прячется CLRF, STOP, ...
|01   OUT 1|DST||SRC|     -     | 1B  01 101 1  // просто вывод регистра в порт
                                                // гипотетически, можно выводить в порт именно константу
                                                // всё равно логика переключения шины SRC между регистром и константой "уже есть"
|01   CMP 0|DST||SRC|     -     | 1C  01 110 0
|01  CMPI 1|DST||      CONST    | 1D  01 110 1
|01  CMPC 0|DST||SRC|     -     | 1E  01 111 0
|01 CMPCI 1|DST||      CONST    | 1F  01 111 1

// команды на 2
// 6 + 10 бит (переход на +-512 байт)
 01 2 3 4 5 6 7  8 9 A B C D E F      CT COP
|10   JMP 0|        OFFSET      | 20  10 000 0
|10  CALL 1|        OFFSET      | 21  10 000 1
|10   RET 0|           -        | 22  10 001 0
|10    JL 1|        OFFSET      | 23  10 001 1
|10    JE 0|        OFFSET      | 24  10 010 0
|10    JG 1|        OFFSET      | 25  10 010 1
|10   JNE 0|        OFFSET      | 26  10 011 0
|10    JC 1|        OFFSET      | 27  10 011 1
|10   JNC 0|        OFFSET      | 28  10 100 0
|10    JZ 1|        OFFSET      | 29  10 100 1
|10   JNZ 0|        OFFSET      | 2A  10 101 0
|10   NOP 1|        OFFSET      | 2B  10 101 1
|10  FJMP 0|        OFFSET      | 2C  // FAR JUMP == JUMP TO OFFSET*16 (или на 64?)
|10 FCALL 1|        OFFSET      | 2D  10 110 0

// команды на 3 == LPM
// кода операции нет, команда выполяется при любых значениях, лишь бы первые два бита были 00 ;)
 01 2 3 4 5 6 7  8 9 A B C D E F        CT COP
    x x x x      x x x x x x x x                // <-- 12 бит
|11   ADDR |DST|       ADDR     | 3x  11 xxx x  // читаем по фиксированному адресу, всего 4096 адресов
                                                // память 16 битная Оо

структура команды:
тип  команда константа
2 бит  3 бит   1 бит
если (CMD TYPE == 0)
  выбираем команду ADD и логику для неё
если (CMD TYPE == 1)
  включаем дешифратор команд, который выбирает AND, MUL, ...
если команда == LPM
  переключаем генератор в режим трёх тактов
  подключаем к OUT мультиплексор с константой, прочитанной LPM
если (CMD TYPE == 2)
  подключаем много разной логики управления RAM, CLRF, OUT, CMP
если (CMD TYPE == 3)
  включаем логику переходов

карта памяти:
FFFF
  16550
FFF8
FFF7
  ROM
8000
7FFF
  RAM
0000

для 16550 доступ по указателю и смещению, наверное не нужен, достаточно кидать константу -1 == FFFF, -2 == FFFE...
на плату RAM добавляем ещё и ROM, а также отрезаем доступ по верхним 16-ти адресам
шины ADDR и CONST меняем местами (или всё же нет)

делаем отдельную плату, на которой располагаем 16550 и PCF8584 (I2C)
на этой плате наоборот делаем доступ по последним 16-ти адресам, и не делаем сумматора адресов

если ужаться до 32 команд, то на код операции уйдёт ровно 5 бит, и тогда можно перейти на 8 регистров,
а вся команда ляжет в 16 бит вместе с 8 бит константой

Любое увеличение команд/регистров свыше 16/4 приводит к тому, что я выхожу за пределы одного байта.
А это приводит к тому, что константу фиг прочитаешь.
Хотя...
Если просто взять 16 бит память, то константа остаётся внутри одного слова.
Хотя без константы часть битов будет пустой.

| 0 1 2 3 4 5 6 7 || 8 9 A B C D E F |
| -  COP  - D S T || S R C           |
| -  COP  - D S T ||    C O N S T    | - и каким мне боком теперь указывать, что здесь константа, а не SRC??
И в итоге всё равно мне нужно уместиться в 32 команды.

переделать проц, сделать так, чтобы:
шина OUT была 16 битной
это позволит более менее универсально сделать не только операцию MUL
но так же делать "сложные" команды а-я "сравнить два числа и переставить местами, если одно больше другого"
плюс "инкремент сразу пары регистров"
плюс "загрузка целого слова в пару регистров"

А лучше переделать его так, чтобы команда выполнялась за один такт!

можно попробовать сделать хитрые банки регистров
банк 1 - для арифметических вычислений
банк 2 - для регистров указателей
при этом банк два подключить к ДРУГОМУ мультиплексору, который будет отдавать адрес в RAM
Тогда получится, что указатели доступны всегда, но чтобы сделать инкремент - надо переключить банк.
Вроде это даже не очень больно.
Зато регистров - дофига.
Упс. Чтобы это сделать понадобиться отдельный мультиплексор для адресов и дополнительные выходы между регистрами и шинниками (там, где сейчас светодиоды стоят).

Ещё можно выкинуть нафиг команду INV, если поставить на шину SRC инверторы, как и планировалось, и использовать команду MOV.
Но команду MOV тоже можно выкинуть, для этого можно использовать битик ZeroSRC (точнее, ZeroDST) и просто дёргать команду ... ADD!!

Чтобы не писать свой собственный код можно попробовать сделать эмулятор 8051 и брать прошивки от него.
