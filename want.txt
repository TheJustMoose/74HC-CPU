заказать платы:
5 MUX4:1 v3
5 переходник 273
10 RegLED
10 MUL

хочется:
Flags
JMPS
RAM
ROM
Addr Counter
Osc

MUL, ALU - похожи на stripboard



 0 1 2 3 4 5 6 7 8 9 A B C D E F
4 + 2 + 2 + 8
|  COP  |DST|SRC|  MAYBE CONST  | N
---------------------------------
|  ADD  |DST|SRC|       -       | 0
| ADDC  |DST|SRC|       -       | 1
|  AND  |DST|SRC|       -       | 2
|   OR  |DST|SRC|       -       | 3
|  XOR  |DST|SRC|       -       | 4
|  MOV  |DST|SRC|       -       | 5
|  UNO  |DST|TYP|       -       | 6
|  MUL  |DST|SRC|       -       | 7
|  LDI  |DST|SRC|       -       | 8
|   LD  |DST|SRC|     CONST     | 9
|   IN  |DST|SRC|       -       | A
|  OUT  |DST|SRC|       -       | B
|   ST  |DST|SRC|       -       | C
| CTRL  | FLAGS |       -       | D
|  CMP  |DST|SRC|       -       | E
| BRANC |  TYPE |       -       | F

можно попробовать сделать так:
 0 1 2 3 4 5 6 7 8 9 A B C D E F
     5    +  3  +  3  = 11
|   ADD   | DST | SRC |    -    | 0
|  ADDC   | DST | SRC |    -    | 1
|   AND   | DST | SRC |    -    | 2
|    OR   | DST | SRC |    -    | 3
|   XOR   | DST | SRC |    -    | 4
|   MOV   | DST | SRC |    -    | 5
|   UNO   | DST | TYP |    -    | 6
|   MUL   | DST | SRC |    -    | 7
|   LDI   | DST |     CONST     | 8   // 5 + 3 + 8 = 16
|    LD   | DST | SRC |    -    | 9
|    IN   | DST | SRC |    -    | A
|   OUT   | DST | SRC |    -    | B
|    ST   | DST | SRC |    -    | C
|  CTRL   |   FLAGS   |    -    | D
|   CMP   | DST | SRC |    -    | E
| BRANCH  |    TYPE   |    -    | F

или даже вот так:
 0 1 2 3 4 5 6 7 8 9 A B C D E F
      6     + 2 + 2 = 10
|     ADD   |DST|SRC|     -     | 0
|    ADDC   |DST|SRC|     -     | 1
|     AND   |DST|SRC|     -     | 2
|      OR   |DST|SRC|     -     | 3
|     XOR   |DST|SRC|     -     | 4
|     MOV   |DST|SRC|     -     | 5
|     MUL   |DST|SRC|     -     | 6
|     UNO   |DST|TYP|     -     | 7
|     LDI   |DST|       CONST   | 8   // 6 + 2 + 8 = 16
|      LD   |DST|SRC|   CONST   | ?   // УПС! было смещение от 0 до 255, стало до 63 ;)
// недостающие биты можно размазать на несколько команд: LD (оба значения), LDO (только смещение), LDA (только адрес R3:R2)
|      LD   |DST|       CONST   | 9   // R3:R2 + CONST
|     LDA   |DST|         -     | A   // R3:R2
|     LDO   |DST|       CONST   | B   // CONST

|      IN   |DST|SRC|     -     | C
|     OUT   |DST|SRC|     -     | D
|      ST   |DST|SRC|   CONST   | E/F/10

|    CTRL   |  FLAGS|     -     | 11   // теперь не нужна, можно сделать CLRF
|     CMP   |DST|SRC|     -     | 12
|    CMPC   |DST|SRC|     -     | 13

и теперь можно чего-нибудь добавить:
|     SUB   |DST|SRC|     -     | 14
|     SBC   |DST|SRC|     -     | 15
|    ADDI   |DST|      CONST    | 16
|   ADDCI   |DST|      CONST    | 17
|    ANDI   |DST|      CONST    | 18
|     ORI   |DST|      CONST    | 19
|    XORI   |DST|      CONST    | 1A
|    MOVI   |DST|      CONST    | 1B
|    MULI   |DST|      CONST    | 1C
|    SUBI   |DST|      CONST    | 1D
|    SBCI   |DST|      CONST    | 1E
|    CMPI   |DST|      CONST    | 1F
|   CMPCI   |DST|      CONST    | 20

|     INC   |DST|         -     | 21
|    INCC   |DST|         -     | 22
|     DEC   |DST|         -     | 23
|    DECC   |DST|         -     | 24

|     LPM   |DST|      ADDR     | 25
|    LPMA   |DST|         -     | 26  // читаем из R3:R2, например

остались не заняты: 26, 27, 28, 29, 2A

|  BRANCH   | TYPE  |  OFFSET   | ?   // а вот с переходами стало как-то совсем грустно :(

но можно сделать так:
|    JMP    |       OFFSET      | 2B  // 6 + 10
|   CALL    |       OFFSET      | 2C  // 6 + 10
|    RET    |          -        | 2D  // 6 + 10
|     JL    |       OFFSET      | 2E  // 6 + 10
|     JE    |       OFFSET      | 2F  // 6 + 10
|     JG    |       OFFSET      | 30  // 6 + 10
|    JNE    |       OFFSET      | 3A  // 6 + 10
|     JC    |       OFFSET      | 3B  // 6 + 10
|    JNC    |       OFFSET      | 3C  // 6 + 10
|     JZ    |       OFFSET      | 3D  // 6 + 10
|    JNZ    |       OFFSET      | 3E  // 6 + 10
|    NOP    |       OFFSET      | 3F  // 6 + 10

туду: переупорядочить как-то команды, чтобы минимизировать логику

------------------------------------------------------------------
6 бит -> 64 команды -> 0..63 -> 00..3F
         4*16

собираем в кучу:

CMD      CONST
TYPE   REQUIRED
 ||       ||
 \/       \/
// команды на 0 (нужен дешифратор на 8)
// используют CONST как надо, переключают мультиплексор
 0 1 2 3 4 5 6 7 8 9 A B C D E F
|0   ADD   0|DST|SRC|     -     | 00  00 000 0
|0  ADDI   1|DST|      CONST    | 01  00 000 1
|0  ADDC   0|DST|SRC|     -     | 02  00 001 0
|0 ADDCI   1|DST|      CONST    | 03  00 001 1
|0   SUB   0|DST|SRC|     -     | 04  00 010 0
|0  SUBI   1|DST|      CONST    | 05  00 010 1
|0  SUBC   0|DST|SRC|     -     | 06  00 011 0
|0 SUBCI   1|DST|      CONST    | 07  00 011 1

|0   AND   0|DST|SRC|     -     | 08  00 000 0
|0  ANDI   1|DST|      CONST    | 09  00 000 1
|0    OR   0|DST|SRC|     -     | 0A  00 001 0
|0   ORI   1|DST|      CONST    | 0B  00 001 1
|0   XOR   0|DST|SRC|     -     | 0C  00 010 0
|0  XORI   1|DST|      CONST    | 0D  00 010 1
|0   MOV   0|DST|SRC|     -     | 0E  00 100 0
|0  MOVI   1|DST|      CONST    | 0F  00 100 1

// команды всё ещё на 0 (нужен дешифратор на 16)
|1   MUL   0|DST|SRC|     -     | 10  01 000 0  // чудес на свете не бывает, и результат всё равно ляжет в два регистра
                                                // поэтому нет смысла экономить на спичках, и умножать на константу
|1   LPM   1|DST|       ADDR    | 11  01 001 1  // читаем по фиксированному адресу
|1   UNO   0|DST|TYP|     -     | 12  01 000 1

|1    LD   1|DST|      CONST    | 13  10 000 1  // LD Rx, [CONST] (load by offset)
|1   LDA   0|DST|         -     | 14  10 001 0  // LD Rx, [R3:R2] (load by ptr)
|1   LDO   1|DST|      CONST    | 15  10 001 1  // LD Rx, [R3:R2 + CONST] (load by ptr+offset)

|1    IN   0|DST|SRC|     -     | 16  01 001 0

// для команды ST выделен отдельный мультиплексор, подключенный к шине OUT
// он получает биты S0:S1 из несколько непривычного места, а именно оттуда,
// откуда обычно достаются биты DST
// содержимое мультиплексора SRC, подаваемое на одноимённую шину, лучше бы занулить
|1    ST   1|S01|      CONST    | 17  10 010 1  // ST [CONST], Rx
|1   STA   0|S01|         -     | 18  10 011 0  // ST [R3:R2], Rx
|1   STO   1|S01|      CONST    | 19  10 011 1  // ST [R3:R2 + CONST], Rx

|1  CTRL   0|TYP|         -     | 1A  10 100 0  // всё та же старая команда CTRL, за которой прячется CLRF, STOP, ...
|1   OUT   1|DST|      CONST    | 1B  10 101 1  // возможно, можно как-то применить, например выводить в порт именно константу
                                                // всё равно логика переключения шины SRC между регистром и константой "уже есть"
|1   CMP   0|DST|SRC|     -     | 1C
|1  CMPI   1|DST|      CONST    | 1D
|1  CMPC   0|DST|SRC|     -     | 1E
|1 CMPCI   1|DST|      CONST    | 1F

// команды на 2 - КАКАЯ-ТО ХЕРНЯ, НУЖНО ПРОВЕРИТЬ
// 6 + 10 бит
|1   JMP   1|       OFFSET      | 20
|1  CALL   1|       OFFSET      | 21
|1   RET   1|          -        | 22
|1    JL   1|       OFFSET      | 23
|1    JE   1|       OFFSET      | 24
|1    JG   1|       OFFSET      | 25
|1   JNE   1|       OFFSET      | 26
|1    JC   1|       OFFSET      | 27
|1   JNC   1|       OFFSET      | 28
|1    JZ   1|       OFFSET      | 29
|1   JNZ   1|       OFFSET      | 2A
|1   NOP   1|       OFFSET      | 2B
// эти можно переделать на пару вида:
// 8 + 8 - короткий переход     | 21
// 8 + 8 - переход по адресу,   | 22
// который домножается на 16    | но увы, именно этих двух комманд у меня не хватает

// команды на 3
пусто

структура команды:
тип  команда константа
2 бит  3 бит   1 бит
если (CMD TYPE == 0)
  выбираем команду ADD и логику для неё
если (CMD TYPE == 1)
  включаем дешифратор команд, который выбирает AND, MUL, ...
если команда == LPM
  переключаем генератор в режим трёх тактов
  подключаем к OUT мультиплексор с константой, прочитанной LPM
если (CMD TYPE == 2)
  подключаем много разной логики управления RAM, CLRF, OUT, CMP
если (CMD TYPE == 3)
  включаем логику переходов

карта памяти:
FFFF
  16550
FFF8
FFF7
  ROM
8000
7FFF
  RAM
0000

для 16550 доступ по указателю и смещению, наверное не нужен, достаточно кидать константу -1 == FFFF, -2 == FFFE...
на плату RAM добавляем ещё и ROM, а также отрезаем доступ по верхним 16-ти адресам
шины ADDR и CONST меняем местами (или всё же нет)

делаем отдельную плату, на которой располагаем 16550 и PCF8584 (I2C)
на этой плате наоборот делаем доступ по последним 16-ти адресам, и не делаем сумматора адресов
